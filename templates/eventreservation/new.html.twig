{% extends 'base.html.twig' %}

{% block title %}New Eventreservation
{% endblock %}
{% block stylesheets %}
	{{ parent() }}
	<style>
		/* Color the label */
		.custom-label {
			color: white; /* Change the color as desired */
		}

		/* Center the form */
		.custom-form {
			 /* Adjust the width as needed */
			/* Add any other styling for centering */
		}
	</style>
{% endblock %}
{% form_theme form _self %}
{% block body %}
	<section class="blog-details-hero set-bg" data-setbg="{{ asset(evenement.photo) }}">
		<div class="container">
			<div class="row">
				<div class="col-lg-8 p-0 m-auto">
					<div class="bh-text">
						<h3>{{ evenement.nomev }}</h3>

					</div>
				</div>
			</div>
		</div>
	</section>


	<section style="background-color: #7a7a7a;">
		<h1 style="color:white;">Create new Eventreservation</h1>
		{{ form_start(form, {'id': 'reservationForm'}) }}
		<div >
			<div class="form-floating mb-3" style="margin: auto;
			width: 50%;" >


				{{ form_label(form.nom, null, {'label_attr': {'for': 'floatingInput','class': 'custom-label'}}) }}
				{{ form_widget(form.nom, {'attr': {'class': 'form-control', 'id': 'floatingInput'}}) }}

				{% if form_errors(form.nom) %}
					<div class="alert alert-primary" role="alert">
						{{ form_errors(form.nom) }}
					</div>
				{% endif %}
			</div>

			<div class="form-floating mb-3" style="margin: auto;
			width: 50%;">
				{{ form_label(form.prenom, null, {'label_attr': {'class': 'custom-label'}, 'attr': {'for': 'floatingInput'}}) }}
				{{ form_widget(form.prenom, {'attr': {'class': 'form-control', 'id': 'floatingInput'}}) }}

				{% if form_errors(form.prenom) %}
					<div class="alert alert-primary" role="alert">
						{{ form_errors(form.prenom) }}
					</div>
				{% endif %}
			</div>
			<div class="form-floating mb-3" style="margin: auto;
			width: 50%;" >
				{{ form_label(form.cin, null, {'attr': {'class': 'custom-label'}, 'attr': {'for': 'floatingInput'}}) }}

				{{ form_widget(form.cin, {'attr': {'class': 'form-control' ,'id': 'eventreservation_cin'}}) }}
				{% if form_errors(form.cin) %}
					<div class="alert alert-primary" role="alert">
						{{ form_errors(form.cin) }}
					</div>
				{% endif %}
				<button id="openCameraBtn">Open Camera</button>
				<button id="captureBtn" style="display: none;">Capture Image</button>
				<video id="cameraFeed" width="320" height="240" autoplay style="display: none;"></video>
				<canvas id="capturedImageCanvas" style="display: none;"></canvas>
			</div>
			<div class="form-floating mb-3" style="margin: auto;
			width: 50%;">
				{{ form_label(form.email, null, {'attr': {'for': 'floatingInput','class': 'custom-label'}}) }}

				{{ form_widget(form.email, {'attr': {'class': 'form-control', 'id': 'floatingInput'}}) }}
				{% if form_errors(form.email) %}
					<div class="alert alert-primary" role="alert">
						{{ form_errors(form.email) }}
					</div>
				{% endif %}
			</div>
			<div class="form-floating mb-3" style="margin: auto;
			width: 50%;">
				{{ form_label(form.numTele, null, {'attr': {'for': 'floatingInput','class': 'custom-label'}}) }}

				{{ form_widget(form.numTele, {'attr': {'class': 'form-control', 'id': 'floatingInput'}}) }}
				{% if form_errors(form.numTele) %}
					<div class="alert alert-primary" role="alert">
						{{ form_errors(form.numTele) }}
					</div>
				{% endif %}
			</div>
<div>


</div>
    {# That will display the error of the captcha to user #}
            
		
			{{ form_widget(form.eventid, {'attr': {'style': 'display:none;'}}) }}
			<button type="submit" href="{{ path('app_evenement_show', {'idevent': evenement.idevent}) }}" class="btn btn-primary" style="    margin: 10px;
    width: 12%;
    margin-left: 468px;">Save</button>
	
			<a href="{{ path('app_evenement_show', {'idevent': evenement.idevent}) }}" class="btn btn-secondary">Back to event</a>
			{{ form_end(form) }}
		</div>
	</section>


	<script>
document.addEventListener('DOMContentLoaded', function() {
    const openCameraBtn = document.getElementById('openCameraBtn');
    const cameraFeed = document.getElementById('cameraFeed');
    const capturedImageCanvas = document.getElementById('capturedImageCanvas');
    const captureBtn = document.getElementById('captureBtn');
    let stream = null;

    openCameraBtn.addEventListener('click', async function(event) {
        event.preventDefault(); // Prevent page from refreshing
        try {
            stream = await navigator.mediaDevices.getUserMedia({ video: true });
            cameraFeed.srcObject = stream;
            cameraFeed.style.display = 'block'; // Show the video element
            captureBtn.style.display = 'block';
        } catch (error) {
            console.error('Error accessing camera:', error);
        }
    });

    captureBtn.addEventListener('click', function(event) {
        event.preventDefault(); // Prevent page from refreshing
        startCapturing();
    });

    function startCapturing() {
        const intervalId = setInterval(captureAndSend, 2000); // Capture every 3 seconds
        captureBtn.addEventListener('click', stopCapturing);

        function captureAndSend() {
            if (stream && cameraFeed.srcObject) {
                const track = stream.getVideoTracks()[0];
                const imageCapture = new ImageCapture(track);
                imageCapture.grabFrame()
                    .then(capturedImageBitmap => {
                        capturedImageCanvas.width = capturedImageBitmap.width;
                        capturedImageCanvas.height = capturedImageBitmap.height;
                        const ctx = capturedImageCanvas.getContext('2d');
                        ctx.drawImage(capturedImageBitmap, 0, 0);
                        const capturedImageDataUrl = capturedImageCanvas.toDataURL('image/jpeg');

                        // Send the captured image data to the server for processing
                        const formData = new FormData();
                        formData.append('capturedImageData', capturedImageDataUrl);

                        fetch('{{ path('app_eventreservation_detect_cin', {'idevent': evenement.idevent}) }}', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
							var db = JSON.stringify(data);
							var db = JSON.parse(db);
                            const cin = db.cin;
                            if (cin.length === 8) {
								const cinField = document.getElementById('eventreservation_cin');
                				cinField.value = cin;
                                stopCapturing();
                            } else {
                                
                
                
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                    })
                    .catch(error => {
                        console.error('Error capturing image:', error);
                    });
            }
        }

        function stopCapturing() {
            clearInterval(intervalId);
            captureBtn.removeEventListener('click', stopCapturing);
			stream.getTracks().forEach(track => track.stop()); // Stop the camera feed
			cameraFeed.style.display = 'none';
        }
    }
});
</script>



{% endblock %}
